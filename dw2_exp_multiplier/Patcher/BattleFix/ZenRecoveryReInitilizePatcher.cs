using System;
using System.IO;
using dw2_exp_multiplier.Base;


namespace dw2_exp_multiplier.Patcher.BattleFix
{
    public class ZenRecoveryReInitilizePatcher : IPatcher
    {
        public static readonly string TOOLTIP = "Reset all state changes permanently.\n";

        private byte[] data;

        public ZenRecoveryReInitilizePatcher(DW2Image dw2Image) : base(dw2Image) { }

        public override string GetName() { return "Zen Recovery & Re-Format Patcher"; }

        public override void Patch(ref FileStream fs)
        {
            if (this.DW2Image.DW2Slus.GetVersion() == DW2Slus.JAP_VERSION)
                throw new NotImplementedException(GetName() + " Not Supported in JAP version");

            data = this.DW2Image.ReadFile(FileIndex.STAG3000_PRO);

            ValidateBytesUS();
            patchBtyesUS(ref fs);
        }

        public override bool ValidateBytes()
        {
            return false;
        }

        private void patchBtyesUS(ref FileStream fs)
        {
            byte[] patchedPattern =
            {
                0x09, 0x00, 0x40, 0x10,
                0x07, 0x80, 0x02, 0x3C,
                0xC0, 0x3C, 0x43, 0x24,
                0x21, 0x20, 0xC3, 0x02,
                0x40, 0x03, 0x82, 0x90,
                0x00, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x40, 0x10,
                0x40, 0x10, 0x16, 0x00,
                0x9A, 0xAB, 0x01, 0x08,
                0x40, 0x03, 0x80, 0xA0,
                0x00, 0x02, 0x62, 0x32,
                0x1B, 0x00, 0x40, 0x10,
                0x07, 0x80, 0x02, 0x3C,
                0xC0, 0x3C, 0x43, 0x24,
                0x21, 0x20, 0xC3, 0x02,
                0x46, 0x03, 0x82, 0x90,
                0x00, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x40, 0x10,
                0x40, 0x10, 0x16, 0x00,
                0x46, 0x03, 0x80, 0xA0,
                0x21, 0x10, 0x43, 0x00,
                0x7A, 0x03, 0x43, 0x94,
                0x00, 0x00, 0x00, 0x00,
                0x1C, 0x00, 0x83, 0xA6,
                0x56, 0x03, 0x43, 0xA4,
                0x86, 0x03, 0x43, 0x94,
                0x00, 0x00, 0x00, 0x00,
                0x1E, 0x00, 0x83, 0xA6,
                0x62, 0x03, 0x43, 0xA4,
                0x92, 0x03, 0x43, 0x94,
                0x00, 0x00, 0x00, 0x00,
                0x20, 0x00, 0x83, 0xA6,
                0x6E, 0x03, 0x43, 0xA4,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, data, 0x7AB8, patchedPattern.Length);

            this.DW2Image.WriteFile(ref data, FileIndex.STAG3000_PRO);
        }

        private void ValidateBytesUS()
        {
            byte[] bytes = {
    0x12, 0x00, 0x40, 0x10, 0x07, 0x80, 0x02, 0x3C, 0xC0, 0x3C, 0x43, 0x24, 0x21, 0x20, 0xC3, 0x02,
    0x40, 0x03, 0x82, 0x90, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x40, 0x10, 0x40, 0x10, 0x16, 0x00,
    0x21, 0x10, 0x43, 0x00, 0x7A, 0x03, 0x43, 0x94, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x83, 0xA6,
    0x86, 0x03, 0x43, 0x94, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x83, 0xA6, 0x92, 0x03, 0x42, 0x94,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x82, 0xA6, 0x40, 0x03, 0x80, 0xA0, 0x00, 0x02, 0x62, 0x32,
    0x12, 0x00, 0x40, 0x10, 0x07, 0x80, 0x02, 0x3C, 0xC0, 0x3C, 0x43, 0x24, 0x21, 0x20, 0xC3, 0x02,
    0x46, 0x03, 0x82, 0x90, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x40, 0x10, 0x40, 0x10, 0x16, 0x00,
    0x21, 0x10, 0x43, 0x00, 0x7A, 0x03, 0x43, 0x94, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x83, 0xA6,
    0x86, 0x03, 0x43, 0x94, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x83, 0xA6, 0x92, 0x03, 0x42, 0x94,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x82, 0xA6, 0x40, 0x03, 0x80, 0xA0,
};
            for (int i = 0, j = 0x7AB8; i < bytes.Length; i++)
            {
                if (bytes[i] != data[j + i])
                    throw new Exception(GetName());
            }
        }
    }
    
}
