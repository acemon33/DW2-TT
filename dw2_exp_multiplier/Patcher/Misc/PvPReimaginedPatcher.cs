using System;
using System.IO;
using dw2_exp_multiplier.Base;


namespace dw2_exp_multiplier.Patcher.Misc
{
    public class PvPReimaginedPatcher : IPatcher
    {
        public static readonly string TOOLTIP = "PvP Battle System similar to Player 1 walkthrough.\n";

        private byte[] Stag3000Data;
        private byte[] Stag3500Data;
        private byte[] Pgftwn00Data;
        private byte[] Fight000Data;
        private byte[] PvPData;

        public PvPReimaginedPatcher(DW2Image dw2Image) : base(dw2Image) { }

        public override string GetName() { return "PvP Reimagined Patcher"; }

        public override void Patch(ref FileStream fs)
        {
            if (this.DW2Image.DW2Slus.GetVersion() == DW2Slus.JAP_VERSION)
                throw new NotImplementedException(GetName() + " Not Supported in JAP version");

            Stag3500Data = this.DW2Image.ReadFile(FileIndex.STAG3500_PRO);
            Pgftwn00Data = this.DW2Image.ReadFile(FileIndex.PGFTWN00_BIN);
            byte[] temp = this.DW2Image.ReadFile(FileIndex.FIGHT000_BIN);
            Fight000Data = new byte[0x5800];
            Buffer.BlockCopy(temp, 0x0, Fight000Data, 0x0, temp.Length);
            Stag3000Data = this.DW2Image.ReadFile(FileIndex.STAG3000_PRO);

            PvPData = File.ReadAllBytes("Resources\\pvp data.bin");

            ValidateBytes();

            patchBtyes(ref fs);
        }

        private void patchBtyes(ref FileStream fs)
        {
            byte[] patchedPattern = { 0xB0, 0xAA, 0x01, 0x08 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3500Data, 0x1764, patchedPattern.Length);
            patchedPattern = new byte[] { 0xD3, 0xAA, 0x01, 0x08 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3500Data, 0xDA0, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x06, 0x80, 0x12, 0x3C, 0x4C, 0x33, 0x42, 0x82, 0x04, 0x80, 0x11, 0x3C, 0x1D, 0x00, 0x40, 0x14,
    0x00, 0x05, 0x02, 0x24, 0x1C, 0x00, 0x82, 0xAC, 0xE0, 0x3D, 0x33, 0x8E, 0x26, 0x74, 0x35, 0x82,
    0x58, 0x33, 0x53, 0xAE, 0x5C, 0x33, 0x55, 0xA2, 0x03, 0x00, 0x14, 0x3C, 0x86, 0xFE, 0x94, 0x26,
    0xE0, 0x3D, 0x34, 0xAE, 0x26, 0x74, 0x35, 0xA2, 0x18, 0x3E, 0x33, 0x8E, 0x42, 0x74, 0x35, 0x82,
    0x54, 0x33, 0x53, 0xAE, 0x5E, 0x33, 0x55, 0xA2, 0x23, 0x00, 0x94, 0x26, 0x18, 0x3E, 0x34, 0xAE,
    0x0B, 0x00, 0x15, 0x24, 0x42, 0x74, 0x35, 0xA2, 0x80, 0x3C, 0x33, 0x8E, 0x76, 0x73, 0x35, 0x82,
    0x50, 0x33, 0x53, 0xAE, 0x4E, 0x33, 0x55, 0xA2, 0x03, 0x00, 0x14, 0x3C, 0x7A, 0xFE, 0x94, 0x26,
    0x80, 0x3C, 0x34, 0xAE, 0x0C, 0x00, 0x15, 0x24, 0x76, 0x73, 0x35, 0xA2, 0x01, 0x00, 0x02, 0x24,
    0x4C, 0x33, 0x42, 0xA2, 0xB3, 0x92, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x02, 0x3C,
    0x06, 0x80, 0x03, 0x3C, 0x58, 0x33, 0x70, 0x8C, 0x5C, 0x33, 0x65, 0x80, 0xE0, 0x3D, 0x50, 0xAC,
    0x26, 0x74, 0x45, 0xA0, 0x54, 0x33, 0x70, 0x8C, 0x5E, 0x33, 0x65, 0x80, 0x18, 0x3E, 0x50, 0xAC,
    0x42, 0x74, 0x45, 0xA0, 0x50, 0x33, 0x70, 0x8C, 0x4E, 0x33, 0x65, 0x80, 0x80, 0x3C, 0x50, 0xAC,
    0x0F, 0x91, 0x01, 0x08, 0x76, 0x73, 0x45, 0xA0
};
            Buffer.BlockCopy(patchedPattern, 0, Stag3500Data, 0x7760, patchedPattern.Length);
            patchedPattern = new byte[] { 0x4C, 0x33, 0x80, 0xA2 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3500Data, 0x1200, patchedPattern.Length);

            patchedPattern = new byte[] { 0xE0, 0x5B, 0x00, 0x00, 0x04, 0x5C, 0x00, 0x00 };
            Buffer.BlockCopy(patchedPattern, 0, Pgftwn00Data, 0x120, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x10, 0xB4, 0x1A, 0x00, 0xF1, 0xFF, 0x00, 0xE5, 0x10, 0x13, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
    0x00, 0x94, 0xD8, 0xFF, 0xFF, 0xFF, 0x00, 0xE5, 0x40, 0x13, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x00, 0x00, 0x70, 0x50, 0x1A, 0x00, 0xF1, 0xFF, 0x00, 0xE5, 0x10, 0x13, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x94, 0xD8, 0xFF, 0xFF, 0xFF, 0x00, 0xE5, 0x40, 0x13, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
};
            Buffer.BlockCopy(patchedPattern, 0, Pgftwn00Data, 0x5BE0, patchedPattern.Length);
            Pgftwn00Data[0x17C] = 0xFE;
            Pgftwn00Data[0x18C] = 0xFF;

            Fight000Data[0x2EF2] = 0xE2;
            Buffer.BlockCopy(PvPData, 0x3E4, Fight000Data, 0x5464, 0xF0);
            patchedPattern = new byte[] { 0x10, 0x4A, 0x00, 0x00, 0x14, 0x4F, 0x00, 0x00 };
            Buffer.BlockCopy(patchedPattern, 0, Fight000Data, 0x84, patchedPattern.Length);
            Buffer.BlockCopy(PvPData, 0x4D4, Fight000Data, 0x2B04, 0x528);
            Buffer.BlockCopy(PvPData, 0x9FC, Fight000Data, 0x49F0, 0xE10);

            byte[] zeroArray = new byte[] { 0x00, 0x00, 0x00, 0x00 };
            Stag3000Data[0x4E40] = 0x06;
            Buffer.BlockCopy(zeroArray, 0, Stag3000Data, 0x4E6C, zeroArray.Length);
            Buffer.BlockCopy(zeroArray, 0, Stag3000Data, 0x4E8C, zeroArray.Length);
            Buffer.BlockCopy(zeroArray, 0, Stag3000Data, 0x4EB0, zeroArray.Length);
            patchedPattern = new byte[] { 0x02, 0x01 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x4CA8, patchedPattern.Length);
            Buffer.BlockCopy(zeroArray, 0, Stag3000Data, 0x5304, zeroArray.Length);
            Buffer.BlockCopy(zeroArray, 0, Stag3000Data, 0xCEDC, zeroArray.Length);
            Stag3000Data[0x1011A] = 0x28;
            Stag3000Data[0x1011E] = 0x28;
            Stag3000Data[0x10122] = 0x28;
            Stag3000Data[0xDFF8] = 0x6;
            Stag3000Data[0xE0A4] = 0x6;
            patchedPattern = new byte[] { 0x01, 0x00, 0x04, 0x24 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x1708, patchedPattern.Length);
            patchedPattern = new byte[] { 0x08, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xE1D8, patchedPattern.Length);
            patchedPattern = new byte[] { 0x50, 0xC5, 0x01, 0x08 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x1914, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x07, 0x80, 0x02, 0x3C, 0xC8, 0x3C, 0x42, 0x24, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x43, 0x34, 0x05, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x43, 0x28,
    0x02, 0x00, 0x60, 0x14, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x84, 0x24, 0x08, 0x00, 0x82, 0x8C,
    0x1F, 0x93, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xE1E0, patchedPattern.Length);
            patchedPattern = new byte[] { 0x00, 0x00, 0xC2, 0x8C };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x352C, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x5E, 0xC5, 0x01, 0x08, 0x00, 0x38, 0x25, 0x85, 0x07, 0x80, 0x02, 0x3C, 0x08, 0x38, 0x42, 0x24,
    0x21, 0x30, 0x04, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x34E0, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0xC8, 0x3C, 0x22, 0x25, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x43, 0x28,
    0x02, 0x00, 0x60, 0x10, 0x30, 0xF7, 0x84, 0x26, 0xF0, 0xF6, 0x84, 0x26, 0x12, 0x9A, 0x01, 0x08,
    0x00, 0x00, 0x00, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xE218, patchedPattern.Length);
            patchedPattern = new byte[] { 0x06, 0x80, 0x03, 0x3C };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x3BFC, patchedPattern.Length);
            patchedPattern = new byte[] { 0x06, 0x80, 0x03, 0x3C, 0x67, 0xC5, 0x01, 0x08, 0x07, 0x80, 0x02, 0x3C };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x3BE8, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0xC8, 0x3C, 0x42, 0x24, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x43, 0x28,
    0x04, 0x00, 0x60, 0x14, 0x30, 0xF7, 0x83, 0x26, 0x00, 0x00, 0x62, 0x8C, 0xD6, 0x9B, 0x01, 0x08,
    0x00, 0x00, 0x00, 0x00, 0xF0, 0xF6, 0x83, 0x26, 0x04, 0x00, 0x62, 0x8C, 0xD6, 0x9B, 0x01, 0x08,
    0x00, 0x00, 0x00, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xE23C, patchedPattern.Length);
            patchedPattern = new byte[] { 0x74, 0xC5, 0x01, 0x08 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x3C58, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x07, 0x80, 0x02, 0x3C, 0xC8, 0x3C, 0x42, 0x24, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x43, 0x28, 0x04, 0x00, 0x60, 0x14, 0x30, 0xF7, 0x83, 0x26, 0x04, 0x00, 0x62, 0x8C,
    0xEF, 0x9B, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF6, 0x83, 0x26, 0x00, 0x00, 0x62, 0x8C,
    0xEF, 0x9B, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xE270, patchedPattern.Length);
            patchedPattern = new byte[]
            {
    0x18, 0x00, 0x03, 0x24, 0x07, 0x80, 0x02, 0x3C, 0x82, 0xC5, 0x01, 0x08, 0xC8, 0x3C, 0x42, 0x24
            };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0x3CBC, patchedPattern.Length);
            Buffer.BlockCopy(PvPData, 0x180C, Stag3000Data, 0xE2A8, 0x24);
            Buffer.BlockCopy(PvPData, 0x1830, Stag3000Data, 0x3B50, 0x4);
            Buffer.BlockCopy(PvPData, 0x1834, Stag3000Data, 0x3B30, 0x8);
            Buffer.BlockCopy(PvPData, 0x183C, Stag3000Data, 0x3B24, 0x4);
            Buffer.BlockCopy(PvPData, 0x1840, Stag3000Data, 0x3B08, 0x8);
            Buffer.BlockCopy(PvPData, 0x1848, Stag3000Data, 0x3B64, 0x8);
            Buffer.BlockCopy(PvPData, 0x1850, Stag3000Data, 0x3B28, 0x8);
            Buffer.BlockCopy(PvPData, 0x1858, Stag3000Data, 0x3FC8, 0x8);
            Buffer.BlockCopy(PvPData, 0x1860, Stag3000Data, 0x4014, 0x8);
            Buffer.BlockCopy(PvPData, 0x1868, Stag3000Data, 0x3F18, 0x8);
            Buffer.BlockCopy(PvPData, 0x1870, Stag3000Data, 0x3F20, 0x8);
            Buffer.BlockCopy(PvPData, 0x1878, Stag3000Data, 0x1914, 0x8);
            Buffer.BlockCopy(PvPData, 0x1880, Stag3000Data, 0x34E0, 0x4);
            Buffer.BlockCopy(PvPData, 0x1884, Stag3000Data, 0xE23C, 0x380);
            Buffer.BlockCopy(PvPData, 0x1C04, Stag3000Data, 0x9CCC, 0x8);
            Buffer.BlockCopy(PvPData, 0x1C0C, Stag3000Data, 0xCA74, 0xC);
            Buffer.BlockCopy(PvPData, 0x1C18, Stag3000Data, 0xE434, 0x1C);
            Buffer.BlockCopy(PvPData, 0x1C34, Stag3000Data, 0xCB5C, 0xC);
            Buffer.BlockCopy(PvPData, 0x1C40, Stag3000Data, 0xE450, 0x1C);
            Buffer.BlockCopy(PvPData, 0x1C5C, Stag3000Data, 0xC96C, 0x8);
            Buffer.BlockCopy(PvPData, 0x1C64, Stag3000Data, 0xE4AC, 0x58);
            Buffer.BlockCopy(PvPData, 0x1CBC, Stag3000Data, 0xC974, 0x38);
            Buffer.BlockCopy(PvPData, 0x1CF4, Stag3000Data, 0xCB9C, 0xC);
            Buffer.BlockCopy(PvPData, 0x1D00, Stag3000Data, 0xE46C, 0x20);
            Buffer.BlockCopy(PvPData, 0x1D20, Stag3000Data, 0xCB70, 0x8);
            Buffer.BlockCopy(PvPData, 0x1D28, Stag3000Data, 0xE48C, 0x20);
            Buffer.BlockCopy(PvPData, 0x1D48, Stag3000Data, 0x4B30, 0x4);
            Buffer.BlockCopy(PvPData, 0x1D4C, Stag3000Data, 0x4A0C, 0x4);
            Buffer.BlockCopy(PvPData, 0x1D50, Stag3000Data, 0x5938, 0xC);
            Stag3000Data[0x4214] = 0x6;
            Stag3000Data[0x4500] = 0x6;
            Buffer.BlockCopy(PvPData, 0x1D5C, Stag3000Data, 0x43F8, 0x1C);
            Buffer.BlockCopy(PvPData, 0x1D78, Stag3000Data, 0x4440, 0x4);
            Buffer.BlockCopy(PvPData, 0x1D7C, Stag3000Data, 0xE54C, 0x18);
            patchedPattern = new byte[] { 0xac, 0x18 };
            Buffer.BlockCopy(patchedPattern, 0, Stag3000Data, 0xDBF0, patchedPattern.Length);
            Buffer.BlockCopy(PvPData, 0x1D94, Stag3000Data, 0xDFD8, 0x4);
            Buffer.BlockCopy(PvPData, 0x1D98, Stag3000Data, 0xCE10, 0x10);
            Buffer.BlockCopy(PvPData, 0x1DA8, Stag3000Data, 0xE564, 0x1C);
            Buffer.BlockCopy(PvPData, 0x1DC4, Stag3000Data, 0x1210, 0x18);
            Stag3000Data[0x1500] = 0x5;
            Stag3000Data[0x16CC] = 0x5;
            Buffer.BlockCopy(PvPData, 0x1DDC, Stag3000Data, 0x3B3C, 0x4);
            Buffer.BlockCopy(PvPData, 0x1DE0, Stag3000Data, 0x3B14, 0x4);
            Buffer.BlockCopy(PvPData, 0x1DE4, Stag3000Data, 0x3E24, 0x4);
            Buffer.BlockCopy(PvPData, 0x1DE8, Stag3000Data, 0xE504, 0x24);
            Buffer.BlockCopy(PvPData, 0x1E0C, Stag3000Data, 0x3DC8, 0x4);
            Buffer.BlockCopy(PvPData, 0x1E10, Stag3000Data, 0xE528, 0x24);
            Buffer.BlockCopy(PvPData, 0x1E34, Stag3000Data, 0xC2B8, 0x8);
            Buffer.BlockCopy(PvPData, 0x1E3C, Stag3000Data, 0xE580, 0x34);

            Buffer.BlockCopy(PvPData, 0x1E70, Stag3000Data, 0x8648, 0x4);
            Buffer.BlockCopy(PvPData, 0x1E74, Stag3000Data, 0x8328, 0x4);
            Buffer.BlockCopy(PvPData, 0x1E78, Stag3000Data, 0x70DC, 0x4);
            Buffer.BlockCopy(PvPData, 0x1E7C, Stag3000Data, 0x8D20, 0x18);

                // Work-around: Softlock when toggling Wireframe with Necro-Magic
            Buffer.BlockCopy(PvPData, 0x1E94, Stag3000Data, 0xC2B8, 0x8);
            Buffer.BlockCopy(PvPData, 0x1E9C, Stag3000Data, 0xE580, 0x24);
            Buffer.BlockCopy(PvPData, 0x1EC0, Stag3000Data, 0x3AA8, 0x4);
            Buffer.BlockCopy(PvPData, 0x1EC4, Stag3000Data, 0xE5A4, 0x14);

            this.DW2Image.WriteFile(ref Stag3500Data, FileIndex.STAG3500_PRO);
            this.DW2Image.WriteFileAtOffset(ref Pgftwn00Data, 196218);
            this.DW2Image.WriteFileAtOffset(ref Fight000Data, 196265);
            this.DW2Image.WriteFileAtOffset(ref Stag3000Data, 196230);
        }

        private void ValidateBytes()
        {
            byte[] bytes = { 0xCC, 0x1A, 0x00, 0x00, 0xE0, 0x1A, 0x00, 0x00 };
            //for (int i = 0, j = 0x120; i < bytes.Length; i++)
            //{
            //    if (bytes[i] != Pgftwn00Data[j + i])
            //        throw new Exception(GetName());
            //}

            bytes = new byte[] { 0x20, 0x2C, 0x00, 0x00, 0x2C, 0x2E, 0x00, 0x00 };
            //for (int i = 0, j = 0x120; i < bytes.Length; i++)
            //{
            //    if (bytes[i] != Fight000Data[j + i])
            //        throw new Exception(GetName());
            //}

        }
    }
    
}
